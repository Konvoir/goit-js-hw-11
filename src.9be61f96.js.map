{"version":3,"sources":["js/promise.js","js/promise2.js","js/promise3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","loger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","id","logSuccess","data","logError","warn","amount","catch"],"mappings":";AAAA,IAAMA,EAAQ,SAAAC,GACH,OAAA,IAAIC,QAAQ,SAACC,GAAYC,OAAAA,WAAW,WAAMD,OAAAA,EAAQF,IAAKA,MAG5DI,EAAQ,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAGlBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACoBjB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA7BA,IAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GACxB,OAAA,IAAIb,QAAQ,SAACC,GAIhBA,EAHqBW,EAASE,IAAI,SAAAC,GAC9BA,OAAAA,EAAKN,OAASI,EAAgBE,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCL,QAASK,EAAKL,SAAWK,QAOnEC,EAAS,SAAAC,GAAgBZ,OAAAA,QAAQa,MAAMD,IAW7CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS;;AC7BnC,IAAMG,EAA4B,SAACC,EAAKC,GAC7BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGlDK,EAAkB,SAACC,GACf5B,IAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAInB,QAAQ,SAACC,EAAS0B,GAGlBzB,OAAAA,WAAW,WAGV0B,GAFeN,KAAKE,SAAW,GAGxBvB,OAAAA,EAAQ,CAAC4B,GAAGH,EAAYG,GAAIzB,KAAMN,IAEzC6B,EAAOD,EAAYG,KAExB/B,MAKLgC,EAAa,SAACC,GAChB1B,QAAQC,IAAmByB,eAAAA,OAAAA,EAAKF,GAAmBE,kBAAAA,OAAAA,EAAK3B,KAAxD,QAGE4B,EAAW,SAAAH,GACbxB,QAAQ4B,KAAqCJ,gCAAAA,OAAAA,EAA7C,+BAaJJ,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC7B3B,KAAKuB,GACLK,MAAMH,GAEXP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC7B3B,KAAKuB,GACLK,MAAMH,GAEXP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,KAC7B3B,KAAKuB,GACLK,MAAMH,GAEXP,EAAgB,CAAEI,GAAI,GAAIK,OAAQ,MAC7B3B,KAAKuB,GACLK,MAAMH;;ACrDX,aAFA,QAAA,gBACA,QAAA,iBACA,QAAA","file":"src.9be61f96.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    return new Promise((resolve) => setTimeout(() => resolve(ms), ms))\n};\n\nconst loger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(loger); // Resolved after 2000ms\ndelay(1000).then(loger); // Resolved after 1000ms\ndelay(1500).then(loger); // Resolved after 1500ms\n\n","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,\n        );\n        resolve(updatedUsers)\n    })\n\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n\n\n        return setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                return resolve({id:transaction.id, time: delay});\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    })\n\n};\n\nconst logSuccess = (data) => {\n    console.log(`Transaction ${data.id} processed in ${data.time}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","import './js/promise';\nimport './js/promise2';\nimport './js/promise3';"]}